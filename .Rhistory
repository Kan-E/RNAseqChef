a <- ("a", "b")
a <- c("a", "b")
as.data.frame(a, row.names = a)
as.data.frame(a, row.names = Unique_ID)
runApp('Desktop/Rproject/volcanoNavi/test.R')
runApp('Desktop/Rproject/volcanoNavi/test.R')
runApp('Desktop/Rproject/volcanoNavi/test.R')
qvalue <- c(NA, NA,NA,2)
group <- as.data.frame(qvalue, row.names = c("a", "b", "c", "d"))
group
group[sort(group$qvalue, decreasing = F, index=T)$ix,]
qvalue2 <- c(6, 1,3,2)
group2 <- as.data.frame(qvalue2, row.names = c("a", "b", "c", "d"))
group2[sort(group2$qvalue2, decreasing = F, index=T)$ix,]
runApp('Desktop/Rproject/volcanoNavi/test.R')
output$GOIheatmap <- renderPlot({
if(is.null(d_row_count_matrix())){
return(NULL)
}else{
if(!is.null(input$GOI)){
data <- data_degcount()
count <- deg_norm_count()
if(str_detect(rownames(data)[1], "ENS")){
if(length(grep("SYMBOL", colnames(data))) != 0){
count <- count[, - which(colnames(count) == "SYMBOL")]
}
}
collist <- factor(gsub("\\_.+$", "", colnames(count)))
vec <- c()
for (i in 1:length(unique(collist))) {
num <- length(collist[collist == unique(collist)[i]])
vec <- c(vec, num)
}
Cond_1 <- vec[1]
Cond_2 <- vec[2]
if(str_detect(rownames(count)[1], "ENS")){
if(input$Species != "not selected"){
Unique_ID <- input$GOI
label_data <- as.data.frame(Unique_ID, row.names = Unique_ID)
data2 <- merge(data, label_data, by="Unique_ID")
rownames(data2) <- data2$Unique_ID
data2 <- data2[, - which(colnames(data2) == "Row.names")]
}else{
Row.names <- input$GOI
label_data <- as.data.frame(Row.names, row.names = Row.names)
data2 <- merge(data, label_data, by="Row.names")
rownames(data2) <- data2$Row.names}
}else{
Row.names <- input$GOI
label_data <- as.data.frame(Row.names, row.names = Row.names)
data2 <- merge(data, label_data, by="Row.names")
rownames(data2) <- data2$Row.names
}
if(is.null(data2)){
ht <- NULL
}else{
data.z <- genescale(data2[,8:(7 + Cond_1 + Cond_2)], axis=1, method="Z")
ht <- Heatmap(data.z, name = "z-score",column_order = colnames(data.z),
clustering_method_columns = 'ward.D2',
show_row_names = T, show_row_dend = F)
}
suppressWarnings(print(ht))
}
}
})
runApp('Desktop/Rproject/volcanoNavi/test.R')
runApp('Desktop/Rproject/volcanoNavi/test.R')
library(shiny); runApp('Desktop/Rproject/volcanoNavi/test.R')
runApp('Desktop/Untitled.R')
runApp('Desktop/Rproject/volcanoNavi/test.R')
runApp('Desktop/Rproject/volcanoNavi/test.R')
library(BiocManager)
options(repos = BiocManager::repositories())
shiny::runApp('Desktop/Rproject/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef')
shiny::runApp('Desktop/Rproject/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef')
library(BiocManager)
options(repos = BiocManager::repositories())
library(shiny); runApp('Untitled.R')
runApp('Untitled.R')
runApp('Untitled.R')
runApp('Untitled.R')
runApp('Untitled.R')
runApp('Untitled.R')
runApp('Untitled.R')
runApp('Untitled.R')
runApp('Untitled.R')
runApp('Untitled.R')
runApp('Untitled.R')
runApp('Untitled.R')
shiny::runApp('Desktop/Rproject/RNAseqChef')
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(fig.width=6, fig.height=5, fig.align = 'center')
readData.out <- readData(inputFile)
library(BiocManager)
options(repos = BiocManager::repositories())
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("org.Xl.eg.db")
switch (input$Species,
"Mus musculus" = org_code <- "mmu",
"Homo sapiens" = org_code <- "hsa",
"Rattus norvegicus" = org_code <- "rno",
"Drosophila melanogaster" = org_code <- "dme",
"Caenorhabditis elegans" = org_code <- "cel")
library(BiocManager)
options(repos = BiocManager::repositories())
library(shiny)
library(DT)
library(gdata)
library(rstatix)
library(multcomp)
library(tidyverse)
library(tools)
library(ggpubr)
library(venn)
library(ggrepel)
library(ggdendro)
library(ggplotify)
library(gridExtra)
library(cowplot)
library(DESeq2)
library(EBSeq)
library(ggnewscale)
library(edgeR)
library(IHW)
library(qvalue)
library(org.Hs.eg.db)
library(org.Mm.eg.db)
library(org.Rn.eg.db)
library(org.Dm.eg.db)
library(org.Ce.eg.db)
library(org.Xl.eg.db)
library(AnnotationDbi)
library(clusterProfiler)
library(enrichplot)
library(DOSE)
library(msigdbr)
library(genefilter)
library(ComplexHeatmap)
library(shinyBS)
library(plotly,verbose=FALSE)
library('shinyjs', verbose = FALSE)
library(BiocManager)
options(repos = BiocManager::repositories())
install.packages(nloptr)
install.packages("nloptr")
install.packages("nloptr")
library(nloptr)
BiocManager::install("nloptr")
library(BiocManager)
options(repos = BiocManager::repositories())
sessionInfo()
library(nloptr)
sessionInfo()
install.packages("symengine")
devtools::install_github("symengine/symengine.R")
BiocManager::install("org.Xl.eg.db")
BiocManager::install("org.Xl.eg.db",force = TRUE)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
pkgs <- c("shiny","DT","gdata","rstatix","multcomp","tidyverse","ggpubr","venn","ggrepel","ggdendro","ggplotify","gridExtra","cowplot","DESeq2","EBSeq","ggnewscale","edgeR","IHW","qvalue","org.Hs.eg.db","org.Mm.eg.db","org.Rn.eg.db","org.Dm.eg.db","org.Ce.eg.db","AnnotationDbi","clusterProfiler","enrichplot","DOSE","msigdbr","genefilter","ComplexHeatmap","shinyBS","plotly","shinyjs","devtools")
for(pkg in pkgs) if (!require(pkg, character.only = T)){
BiocManager::install(pkg, update = F)
}
devtools::install_github("Kan-E/rnaseqviewer")
devtools::install_github("Kan-E/rnaseqviewer")
library(rnaseqviewer)
library(BiocManager)
options(repos = BiocManager::repositories())
install.packages("repmis")
library(repmis)
InstallOldPackages(pkgs = "nloptr", versions = "1.2.2.3")
install.packages("nloptr")
library(nloptr)
shiny::runGitHub("RNAseqChef", "Kan-E")
remove.packages(nloptr)
remove.packages("nloptr")
remove.packages("org.Xl.eg.db")
BiocManager::install("org.Xl.eg.db")
library(nloptr)
remove.packages("nloptr")
library(BiocManager)
options(repos = BiocManager::repositories())
remove.packages("org.Xl.eg.db")
BiocManager::install("org.Xl.eg.db")
install.packages(nloptr)
install.packages("nloptr")
library(BiocManager)
options(repos = BiocManager::repositories())
### GOI profiling
<br><br>
![norm goi](https://user-images.githubusercontent.com/77435195/170165950-4d3a80fa-d29a-40b7-a1c9-be09c2357863.png)
<br><br>
library(shiny); runApp('Desktop/Rproject/Automate_shiny/Automate_webApp.R')
runApp('Desktop/Rproject/RNAseqChef')
setwd("~/ATAC-seq")
data<-read.table("Sen.bed",header = F)
library(ChIPpeakAnno)
BiocManager::install(c("GenomicRanges","IRanges"))
help("BED2RangedData")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ChIPpeakAnno")
data.g <- toGRanges(data, format="BED", header=FALSE)
head8data
head(data)
colnames(data)<-c("chrom","start","end","V4","V5","v6","v7","v8","v9","v10")
data.g <- toGRanges(data, format="BED", header=FALSE)
head(data)
head(system.file("extdata", "MACS_output.bed", package="ChIPpeakAnno"))
colnames(data)<-c("seqnames","start","end","V4","V5","v6","v7","v8","v9","v10")
data.g <- toGRanges(data, format="BED", header=FALSE)
head(data.g)
data("TSS.human.GRCh38")
macs.anno <- annotatePeakInBatch(data.g, AnnotationData=TSS.human.GRCh38)
head(macs.anno)
data("TSS.human.GRCh38")
macs.anno <- annotatePeakInBatch(data.g, AnnotationData=TSS.human.GRCh37)
head(macs.anno)
data("TSS.human.GRCh37")
macs.anno <- annotatePeakInBatch(data.g, AnnotationData=TSS.human.GRCh37)
head(macs.anno)
library(org.Hs.eg.db)
macs.anno <- addGeneIDs(annotatedPeak=macs.anno,
orgAnn="org.Hs.eg.db",
IDs2Add="symbol")
head(macs.anno)
unique(macs.anno$insideFeature)
annotationData <- promoters(TSS.human.GRCh37, upstream=500, downstream=500)
head(annotationData)
annotatedPeak <- annotatePeakInBatch(macs.anno[1:6,],
AnnotationData=annotationData,
output="overlapping")
head(annotatedPeak)
data(myPeakList)
head(myPeakList)
data2 <- dplyr::filter(annotatedPeak, fromOverlappingOrNearest == "Overlapping")
data2 <- dplyr::filter(annotatedPeak, fromOverlappingOrNearest == "Overlapping")
data2 <- dplyr::filter(annotatedPeak, !is.na(fromOverlappingOrNearest))
data2 <- dplyr::filter(as.data.frame(annotatedPeak), !is.na(fromOverlappingOrNearest))
head(data2)
View(annotatedPeak)
View(macs.anno)
library(org.Hs.eg.db)
library(ChIPpeakAnno)
setwd("~/Downloads/RNA-seq analysis/202009Chip-seq")
data <- read.table("macs_Sen_siACLY_summits.bed",header = F)
colnames(data)<-c("seqnames","start","end","V4","V5","v6","v7","v8","v9","v10")
head(data)
colnames(data)<-c("seqnames","start","end","V4","V5")
data.g <- toGRanges(data, format="BED", header=FALSE)
macs.anno <- annotatePeakInBatch(data.g, AnnotationData=TSS.human.GRCh37)
macs.anno <- addGeneIDs(annotatedPeak=macs.anno,
orgAnn="org.Hs.eg.db",
IDs2Add="symbol")
annotationData <- promoters(TSS.human.GRCh37, upstream=2000, downstream=2000)
annotatedPeak <- annotatePeakInBatch(macs.anno[1:6,],
AnnotationData=annotationData,
output="overlapping")
head(annotatedPeak)
annotatedPeak <- annotatePeakInBatch(macs.anno,
AnnotationData=annotationData,
output="overlapping")
head(annotatedPeak)
data2 <- dplyr::filter(as.data.frame(annotatedPeak), !is.na(fromOverlappingOrNearest))
head(data2)
data3 <- dplyr::filter(as.data.frame(annotatedPeak), !is.na(symbol))
head(data3)
data3 <- dplyr::filter(as.data.frame(data2), !is.na(symbol))
head(data3)
annotationData <- promoters(TSS.human.GRCh37, upstream=500, downstream=500)
annotatedPeak <- annotatePeakInBatch(macs.anno,
AnnotationData=annotationData,
output="overlapping")
macs.anno <- annotatePeakInBatch(data.g, AnnotationData=TSS.human.GRCh37)
macs.anno <- addGeneIDs(annotatedPeak=macs.anno,
orgAnn="org.Hs.eg.db",
IDs2Add="symbol")
macs.anno <- dplyr::filter(macs.anno, !is.na(symbol))
macs.anno <- addGeneIDs(annotatedPeak=macs.anno,
orgAnn="org.Hs.eg.db",
IDs2Add="symbol")
annotationData <- promoters(TSS.human.GRCh37, upstream=500, downstream=500)
annotatedPeak <- annotatePeakInBatch(macs.anno,
AnnotationData=annotationData,
output="overlapping")
data2 <- dplyr::filter(as.data.frame(annotatedPeak), !is.na(fromOverlappingOrNearest))
data2 <- dplyr::filter(as.data.frame(annotatedPeak), !is.na(fromOverlappingOrNearest))
data3 <- dplyr::filter(as.data.frame(data2), !is.na(symbol))
head(data3)
annotatedPeak <- annotatePeakInBatch(macs.anno, featureType = "TSS"
AnnotationData=annotationData,
output="overlapping")
annotatedPeak <- annotatePeakInBatch(macs.anno, featureType = "TSS",
AnnotationData=annotationData,
output="overlapping")
data2 <- dplyr::filter(as.data.frame(annotatedPeak), !is.na(fromOverlappingOrNearest))
data3 <- dplyr::filter(as.data.frame(data2), !is.na(symbol))
class(data.g)
is(data.g)
head(data.g)
BiocManager::install("QuGAcomp")
library(QuGAcomp)
library(shiny); runApp('~/Desktop/ multiple input file2.R')
source("~/Desktop/ multiple input file2.R")
runApp('~/Desktop/ multiple input file2.R')
library(tidyverse)
library(ggplot2)
library(tidyverse)
setwd("/Volumes/HD-PCGU3-A/HD-PCGU3-A/flux analyzer/20220506sip53 flux third")
library(tidyverse)
data <- read.csv("OCR.csv")
data <- data %>% tidyr::gather(key = sample,
value = value,
-Row.names)
data$sample <- gsub("\\_.+$", "", data$sample)
mean_sd_OCAR <- data %>%
group_by(sample, Row.names) %>%
summarize(mean = mean(value), sd=sd(value))
errors_OCAR <- aes(ymax = mean + sd, ymin = mean - sd)
OCR <- ggplot(mean_sd_OCAR,
aes(x=Row.names,
y=mean, group=sample,
col=sample)) +geom_line() +
geom_errorbar(errors_OCAR, width = 0.2) + geom_point() +
theme_light() + xlab("Time (min)") + ylab("OCR (pmol/min)")
pdf("OCR.pdf",height = 3.5,width = 5)
print(OCR)
dev.off()
data2 <- read.csv("ECAR.csv")
data2 <- data2 %>% tidyr::gather(key = sample,
value = value,
-Row.names)
data2$sample <- gsub("\\_.+$", "", data2$sample)
mean_sd_ECAR <- data2 %>%
group_by(sample, Row.names) %>%
summarize(mean = mean(value), sd = sd(value))
errors_ECAR <- aes(ymax = mean + sd,
ymin = mean - sd)
ECAR <- ggplot(mean_sd_ECAR,
aes(x=Row.names,
y=mean, group=sample,
col=sample)) +geom_line() +
geom_errorbar(errors_ECAR, width = 0.2) + geom_point() +
theme_light() + xlab("Time (min)") + ylab("ECAR (mpH/min)") +
scale_y_continuous(limits = c(0, NA))
pdf("ECAR.pdf",height = 3.5,width = 5)
print(ECAR)
dev.off()
pdf("flux_assay.pdf",height = 3.5,width = 10)
gridExtra::grid.arrange(OCR, ECAR, nrow = 1)
dev.off()
runApp('Desktop/Rproject/RNAseqChef')
shiny::runApp('Desktop/Rproject/RNAseqChef')
runApp('マニュアル作成/batchmode.R')
source("~/マニュアル作成/batchmode.R")
runApp('マニュアル作成/batchmode.R')
runApp('マニュアル作成/batchmode.R')
runApp('マニュアル作成/batchmode.R')
runApp('マニュアル作成/batchmode.R')
runApp('マニュアル作成/batchmode.R')
runApp('マニュアル作成/batchmode.R')
BiocManager::install("tippy")
runApp('マニュアル作成/batchmode.R')
runApp('マニュアル作成/batchmode.R')
runApp('マニュアル作成/batchmode.R')
runApp('マニュアル作成/batchmode.R')
runApp('マニュアル作成/batchmode.R')
runApp('マニュアル作成/batchmode.R')
runApp('マニュアル作成/batchmode.R')
runApp('マニュアル作成/batchmode.R')
runApp('マニュアル作成/batchmode.R')
runApp('マニュアル作成/batchmode.R')
runApp('Desktop/Rproject/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef')
shiny::runApp('Desktop/Rproject/RNAseqChef')
head(multi_deg_count)
shiny::runApp('Desktop/Rproject/RNAseqChef')
shiny::runApp('Desktop/Rproject/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef')
runApp()
runApp('Desktop/Rproject/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef')
runApp()
runApp('Desktop/Rproject/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef')
shiny::runApp('Desktop/Rproject/RNAseqChef')
shiny::runApp('Desktop/Rproject/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef')
shiny::runApp('Desktop/Rproject/RNAseqChef')
if (!require("BiocManager"))
install.packages("BiocManager")
BiocManager::install("maftools")
library(maftools)
laml.maf = system.file('extdata', 'tcga_laml.maf.gz', package = 'maftools')
#clinical information containing survival information and histology. This is optional
laml.clin = system.file('extdata', 'tcga_laml_annot.tsv', package = 'maftools')
laml = read.maf(maf = laml.maf, clinicalData = laml.clin)
laml
getSampleSummary(laml)
#Shows gene summary.
getGeneSummary(laml)
#shows clinical data associated with samples
getClinicalData(laml)
#Shows all fields in MAF
getFields(laml)
#Writes maf summary to an output file with basename laml.
write.mafSummary(maf = laml, basename = 'laml')
plotmafSummary(maf = laml, rmOutlier = TRUE, addStat = 'median', dashboard = TRUE, titvRaw = FALSE)
oncoplot(maf = laml, top = 10)
plotProtein(gene = "ACLY")
shiny::runApp('Desktop/Rproject/RNAseqChef')
icon("dashboard")
icon("tachometer-alt")
require (devtools)
install_version("shinydashboardPlus", version="0.7.5",repos = "http://cran.us.r-project.org")
runApp('Desktop/Rproject/RNAseqChef')
Sys.setlocale("LC_MESSAGES",'en_US')
runApp('Desktop/Rproject/RNAseqChef')
a
Sys.setlocale("LC_MESSAGES",'en_US')
a
shiny::runApp('Desktop/Rproject/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef')
dorothea <- function(species, type, org){
if(species == "Mus musculus"){
net <- dorothea::dorothea_mm
}else{
net <- dorothea::dorothea_hs
}
net2 <- net %>% filter(confidence != "D") %>% filter(confidence != "E")
if(type == "DoRothEA regulon (activator)") net2 <- net2%>% filter(mor == 1)
if(type == "DoRothEA regulon (repressor)") net2 <- net2%>% filter(mor == -1)
my.symbols <- gsub("\\..*","", net2$target)
gene_IDs<-AnnotationDbi::select(org,keys = my.symbols,
keytype = "SYMBOL",
columns = c("SYMBOL", "ENTREZID"))
colnames(gene_IDs) <- c("target", "ENTREZID")
gene_IDs <- gene_IDs %>% distinct(target, .keep_all = T)
gene_IDs <- na.omit(gene_IDs)
net2 <- merge(net2, gene_IDs, by="target")
net3 <- data.frame(gs_name = net2$tf, entrez_gene = net2$ENTREZID, target = net2$target, confidence = net2$confidence)
net3 <- dplyr::arrange(net3, gs_name)
if(species != "Mus musculus" && species != "Homo sapiens"){
genes <- net3$entrez_gene
switch (species,
"Rattus norvegicus" = set <- "rnorvegicus_gene_ensembl",
"Xenopus laevis" = set <- "xtropicalis_gene_ensembl",
"Drosophila melanogaster" = set <- "dmelanogaster_gene_ensembl",
"Caenorhabditis elegans" = set <- "celegans_gene_ensembl")
convert = useMart("ensembl", dataset = set, host="https://dec2021.archive.ensembl.org")
human = useMart("ensembl", dataset = "hsapiens_gene_ensembl", host="https://dec2021.archive.ensembl.org")
genes = getLDS(attributes = c("entrezgene_id"), filters = "entrezgene_id",
values = genes ,mart = human,
attributesL = c("entrezgene_id"),
martL = convert, uniqueRows=T)
colnames(genes) <- c("entrez_gene", "converted_entrez_gene")
genes <- genes %>% distinct(converted_entrez_gene, .keep_all = T)
merge <- merge(net3, genes, by = "entrez_gene")
net3 <- data.frame(gs_name = merge$gs_name, entrez_gene = merge$converted_entrez_gene, confidence = merge$confidence)
net3 <- dplyr::arrange(net3, gs_name)
}
return(net3)
}
head(dorothea(species = "Mus musculus",type = "DoRothEA regulon (activator)",org = org.Mm.eg.db))
runApp('Desktop/Rproject/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef')
BiocManager::install("sigminer")
library(sigminer)
data <- read_vcf("/Volumes/HD-PCGU3-A/mutect2_vcf/",genome_build = "hg19")
data <- read_vcf("/Volumes/HD-PCGU3-A/mutect2_vcf/12187_1_IDT.mutect2.vcf",genome_build = "hg19")
head(data)
library(maftools)
data
laml <- data
getSampleSummary(laml)
#Shows gene summary.
getGeneSummary(laml)
#shows clinical data associated with samples
getClinicalData(laml)
#Shows all fields in MAF
getFields(laml)
#Writes maf summary to an output file with basename laml.
write.mafSummary(maf = laml, basename = 'laml')
plotmafSummary(maf = laml, rmOutlier = TRUE, addStat = 'median', dashboard = TRUE, titvRaw = FALSE)
data <- list.files("/Volumes/HD-PCGU3-A/mutect2_vcf/",full.names = TRUE)
laml <- read_vcf(data,genome_build = "hg19")
laml <- read_vcf(data,genome_build = "hg19")
laml.clin = system.file('extdata', 'tcga_laml_annot.tsv', package = 'maftools')
laml.maf = system.file('extdata', 'tcga_laml.maf.gz', package = 'maftools')
head(laml.clin)
clin <- read.table(laml.clin, row.names = 1, header = T)
shiny::runApp('Desktop/Rproject/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef')
