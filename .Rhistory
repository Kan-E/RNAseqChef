-Row.names)
data2$sample <- gsub("\\_.+$", "", data2$sample)
mean_sd_ECAR <- data2 %>%
group_by(sample, Row.names) %>%
summarize(mean = mean(value), sd = sd(value))
errors_ECAR <- aes(ymax = mean + sd,
ymin = mean - sd)
ECAR <- ggplot(mean_sd_ECAR,
aes(x=Row.names,
y=mean, group=sample,
col=sample)) +geom_line() +
geom_errorbar(errors_ECAR, width = 0.2) + geom_point() +
theme_light() + xlab("Time (min)") + ylab("ECAR (mpH/min)") +
scale_y_continuous(limits = c(0, NA))
pdf("ECAR.pdf",height = 3.5,width = 5)
print(ECAR)
dev.off()
pdf("flux_assay.pdf",height = 3.5,width = 10)
gridExtra::grid.arrange(OCR, ECAR, nrow = 1)
dev.off()
runApp('Desktop/Rproject/RNAseqChef')
shiny::runApp('Desktop/Rproject/RNAseqChef')
runApp('マニュアル作成/batchmode.R')
source("~/マニュアル作成/batchmode.R")
runApp('マニュアル作成/batchmode.R')
runApp('マニュアル作成/batchmode.R')
runApp('マニュアル作成/batchmode.R')
runApp('マニュアル作成/batchmode.R')
runApp('マニュアル作成/batchmode.R')
runApp('マニュアル作成/batchmode.R')
BiocManager::install("tippy")
runApp('マニュアル作成/batchmode.R')
runApp('マニュアル作成/batchmode.R')
runApp('マニュアル作成/batchmode.R')
runApp('マニュアル作成/batchmode.R')
runApp('マニュアル作成/batchmode.R')
runApp('マニュアル作成/batchmode.R')
runApp('マニュアル作成/batchmode.R')
runApp('マニュアル作成/batchmode.R')
runApp('マニュアル作成/batchmode.R')
runApp('マニュアル作成/batchmode.R')
runApp('Desktop/Rproject/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef')
shiny::runApp('Desktop/Rproject/RNAseqChef')
head(multi_deg_count)
shiny::runApp('Desktop/Rproject/RNAseqChef')
shiny::runApp('Desktop/Rproject/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef')
runApp()
runApp('Desktop/Rproject/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef')
runApp()
runApp('Desktop/Rproject/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef')
shiny::runApp('Desktop/Rproject/RNAseqChef')
shiny::runApp('Desktop/Rproject/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef')
shiny::runApp('Desktop/Rproject/RNAseqChef')
if (!require("BiocManager"))
install.packages("BiocManager")
BiocManager::install("maftools")
library(maftools)
laml.maf = system.file('extdata', 'tcga_laml.maf.gz', package = 'maftools')
#clinical information containing survival information and histology. This is optional
laml.clin = system.file('extdata', 'tcga_laml_annot.tsv', package = 'maftools')
laml = read.maf(maf = laml.maf, clinicalData = laml.clin)
laml
getSampleSummary(laml)
#Shows gene summary.
getGeneSummary(laml)
#shows clinical data associated with samples
getClinicalData(laml)
#Shows all fields in MAF
getFields(laml)
#Writes maf summary to an output file with basename laml.
write.mafSummary(maf = laml, basename = 'laml')
plotmafSummary(maf = laml, rmOutlier = TRUE, addStat = 'median', dashboard = TRUE, titvRaw = FALSE)
oncoplot(maf = laml, top = 10)
plotProtein(gene = "ACLY")
shiny::runApp('Desktop/Rproject/RNAseqChef')
icon("dashboard")
icon("tachometer-alt")
require (devtools)
install_version("shinydashboardPlus", version="0.7.5",repos = "http://cran.us.r-project.org")
runApp('Desktop/Rproject/RNAseqChef')
Sys.setlocale("LC_MESSAGES",'en_US')
runApp('Desktop/Rproject/RNAseqChef')
a
Sys.setlocale("LC_MESSAGES",'en_US')
a
shiny::runApp('Desktop/Rproject/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef')
dorothea <- function(species, type, org){
if(species == "Mus musculus"){
net <- dorothea::dorothea_mm
}else{
net <- dorothea::dorothea_hs
}
net2 <- net %>% filter(confidence != "D") %>% filter(confidence != "E")
if(type == "DoRothEA regulon (activator)") net2 <- net2%>% filter(mor == 1)
if(type == "DoRothEA regulon (repressor)") net2 <- net2%>% filter(mor == -1)
my.symbols <- gsub("\\..*","", net2$target)
gene_IDs<-AnnotationDbi::select(org,keys = my.symbols,
keytype = "SYMBOL",
columns = c("SYMBOL", "ENTREZID"))
colnames(gene_IDs) <- c("target", "ENTREZID")
gene_IDs <- gene_IDs %>% distinct(target, .keep_all = T)
gene_IDs <- na.omit(gene_IDs)
net2 <- merge(net2, gene_IDs, by="target")
net3 <- data.frame(gs_name = net2$tf, entrez_gene = net2$ENTREZID, target = net2$target, confidence = net2$confidence)
net3 <- dplyr::arrange(net3, gs_name)
if(species != "Mus musculus" && species != "Homo sapiens"){
genes <- net3$entrez_gene
switch (species,
"Rattus norvegicus" = set <- "rnorvegicus_gene_ensembl",
"Xenopus laevis" = set <- "xtropicalis_gene_ensembl",
"Drosophila melanogaster" = set <- "dmelanogaster_gene_ensembl",
"Caenorhabditis elegans" = set <- "celegans_gene_ensembl")
convert = useMart("ensembl", dataset = set, host="https://dec2021.archive.ensembl.org")
human = useMart("ensembl", dataset = "hsapiens_gene_ensembl", host="https://dec2021.archive.ensembl.org")
genes = getLDS(attributes = c("entrezgene_id"), filters = "entrezgene_id",
values = genes ,mart = human,
attributesL = c("entrezgene_id"),
martL = convert, uniqueRows=T)
colnames(genes) <- c("entrez_gene", "converted_entrez_gene")
genes <- genes %>% distinct(converted_entrez_gene, .keep_all = T)
merge <- merge(net3, genes, by = "entrez_gene")
net3 <- data.frame(gs_name = merge$gs_name, entrez_gene = merge$converted_entrez_gene, confidence = merge$confidence)
net3 <- dplyr::arrange(net3, gs_name)
}
return(net3)
}
head(dorothea(species = "Mus musculus",type = "DoRothEA regulon (activator)",org = org.Mm.eg.db))
runApp('Desktop/Rproject/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef')
BiocManager::install("sigminer")
library(sigminer)
data <- read_vcf("/Volumes/HD-PCGU3-A/mutect2_vcf/",genome_build = "hg19")
data <- read_vcf("/Volumes/HD-PCGU3-A/mutect2_vcf/12187_1_IDT.mutect2.vcf",genome_build = "hg19")
head(data)
library(maftools)
data
laml <- data
getSampleSummary(laml)
#Shows gene summary.
getGeneSummary(laml)
#shows clinical data associated with samples
getClinicalData(laml)
#Shows all fields in MAF
getFields(laml)
#Writes maf summary to an output file with basename laml.
write.mafSummary(maf = laml, basename = 'laml')
plotmafSummary(maf = laml, rmOutlier = TRUE, addStat = 'median', dashboard = TRUE, titvRaw = FALSE)
data <- list.files("/Volumes/HD-PCGU3-A/mutect2_vcf/",full.names = TRUE)
laml <- read_vcf(data,genome_build = "hg19")
laml <- read_vcf(data,genome_build = "hg19")
laml.clin = system.file('extdata', 'tcga_laml_annot.tsv', package = 'maftools')
laml.maf = system.file('extdata', 'tcga_laml.maf.gz', package = 'maftools')
head(laml.clin)
clin <- read.table(laml.clin, row.names = 1, header = T)
shiny::runApp('Desktop/Rproject/RNAseqChef')
install.packages("https://cran.r-project.org/src/contrib/Archive/lasso2/lasso2_1.2-22.tar.gz",repos = NULL, type = "source")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
pkgs <- c("DESeq2","EBSeq","ggnewscale","edgeR","IHW",
"qvalue","org.Hs.eg.db","org.Mm.eg.db","org.Rn.eg.db","org.Xl.eg.db","org.Dm.eg.db",
"org.Ce.eg.db","AnnotationDbi","clusterProfiler","enrichplot","DOSE","msigdbr","genefilter",
"ComplexHeatmap","shinyBS","plotly","shinyjs","DEGreport","devtools","dorothea","umap", "biomaRt")
for(pkg in pkgs) if (!require(pkg, character.only = T)){
BiocManager::install(pkg, update = F)
}
pkgs <- c("shiny","DT","gdata","rstatix","multcomp","tidyverse","ggpubr","venn","ggrepel",
"ggdendro","ggplotify","gridExtra","cowplot","DESeq2","EBSeq","ggnewscale","edgeR","IHW",
"qvalue","org.Hs.eg.db","org.Mm.eg.db","org.Rn.eg.db","org.Xl.eg.db","org.Dm.eg.db",
"org.Ce.eg.db","AnnotationDbi","clusterProfiler","enrichplot","DOSE","msigdbr","genefilter",
"ComplexHeatmap","shinyBS","plotly","shinyjs","DEGreport","devtools","dorothea","umap", "biomaRt")
for(pkg in pkgs) if (!require(pkg, character.only = T)){
BiocManager::install(pkg, update = F)
}
pkgs <- c("shiny","DT","gdata","rstatix","multcomp","tidyverse","ggpubr","venn","ggrepel",
"ggdendro","ggplotify","gridExtra","cowplot","DESeq2","EBSeq","ggnewscale","edgeR","IHW",
"qvalue","org.Hs.eg.db","org.Mm.eg.db","org.Rn.eg.db","org.Xl.eg.db","org.Dm.eg.db",
"org.Ce.eg.db","AnnotationDbi","clusterProfiler","enrichplot","DOSE","msigdbr","genefilter",
"ComplexHeatmap","shinyBS","plotly","shinyjs","DEGreport","devtools","dorothea","umap", "biomaRt")
for(pkg in pkgs) if (!require(pkg, character.only = T)){
BiocManager::install(pkg, update = F)
}
pkgs <- c("shiny","DT","gdata","rstatix","multcomp","tidyverse","ggpubr","venn","ggrepel",
"ggdendro","ggplotify","gridExtra","cowplot","DESeq2","EBSeq","ggnewscale","edgeR","IHW",
"qvalue","org.Hs.eg.db","org.Mm.eg.db","org.Rn.eg.db","org.Xl.eg.db","org.Dm.eg.db",
"org.Ce.eg.db","AnnotationDbi","clusterProfiler","enrichplot","DOSE","msigdbr","genefilter",
"ComplexHeatmap","shinyBS","plotly","shinyjs","DEGreport","devtools","dorothea","umap", "biomaRt")
for(pkg in pkgs) if (!require(pkg, character.only = T)){
BiocManager::install(pkg, update = F)
}
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
install.packages("https://cran.r-project.org/src/contrib/Archive/lasso2/lasso2_1.2-22.tar.gz",repos = NULL, type = "source")
pkgs <- c("shiny","DT","gdata","rstatix","multcomp","tidyverse","ggpubr","venn","ggrepel",
"ggdendro","ggplotify","gridExtra","cowplot","DESeq2","EBSeq","ggnewscale","edgeR","IHW",
"qvalue","org.Hs.eg.db","org.Mm.eg.db","org.Rn.eg.db","org.Xl.eg.db","org.Dm.eg.db",
"org.Ce.eg.db","AnnotationDbi","clusterProfiler","enrichplot","DOSE","msigdbr","genefilter",
"ComplexHeatmap","shinyBS","plotly","shinyjs","DEGreport","devtools","dorothea","umap", "biomaRt")
for(pkg in pkgs) if (!require(pkg, character.only = T)){
BiocManager::install(pkg, update = F)
}
BiocManager::install("DESeq2")
BiocManager::install("DESeq2")
shiny::runApp('Desktop/Rproject/RNAseqChef')
sessionInfo()
install.packages("https://cran.r-project.org/src/contrib/Archive/lasso2/lasso2_1.2-22.tar.gz",repos = NULL, type = "source")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
install.packages("https://cran.r-project.org/src/contrib/Archive/lasso2/lasso2_1.2-22.tar.gz",repos = NULL, type = "source")
pkgs <- c("shiny","DT","gdata","rstatix","multcomp","tidyverse","ggpubr","venn","ggrepel",
"ggdendro","ggplotify","gridExtra","cowplot","DESeq2","EBSeq","ggnewscale","edgeR","IHW",
"qvalue","org.Hs.eg.db","org.Mm.eg.db","org.Rn.eg.db","org.Xl.eg.db","org.Dm.eg.db",
"org.Ce.eg.db","AnnotationDbi","clusterProfiler","enrichplot","DOSE","msigdbr","genefilter",
"ComplexHeatmap","shinyBS","plotly","shinyjs","DEGreport","devtools","dorothea","umap", "biomaRt")
for(pkg in pkgs) if (!require(pkg, character.only = T)){
BiocManager::install(pkg, update = F)
}
system2("gcc")
system2("gcc","--version")
install.packages("https://cran.r-project.org/src/contrib/Archive/lasso2/lasso2_1.2-22.tar.gz",repos = NULL, type = "source")
install.packages("https://cran.r-project.org/src/contrib/Archive/lasso2/lasso2_1.2-22.tar.gz",repos = NULL, type = "source")
install.packages("https://cran.r-project.org/src/contrib/Archive/lasso2/lasso2_1.2-22.tar.gz",repos = NULL, type = "source")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
install.packages("https://cran.r-project.org/src/contrib/Archive/lasso2/lasso2_1.2-22.tar.gz",repos = NULL, type = "source")
pkgs <- c("shiny","DT","gdata","rstatix","multcomp","tidyverse","ggpubr","venn","ggrepel",
"ggdendro","ggplotify","gridExtra","cowplot","DESeq2","EBSeq","ggnewscale","edgeR","IHW",
"qvalue","org.Hs.eg.db","org.Mm.eg.db","org.Rn.eg.db","org.Xl.eg.db","org.Dm.eg.db",
"org.Ce.eg.db","AnnotationDbi","clusterProfiler","enrichplot","DOSE","msigdbr","genefilter",
"ComplexHeatmap","shinyBS","plotly","shinyjs","DEGreport","devtools","dorothea","umap", "biomaRt")
for(pkg in pkgs) if (!require(pkg, character.only = T)){
BiocManager::install(pkg, update = F)
}
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
install.packages("https://cran.r-project.org/src/contrib/Archive/lasso2/lasso2_1.2-22.tar.gz",repos = NULL, type = "source")
pkgs <- c("shiny","DT","gdata","rstatix","multcomp","tidyverse","ggpubr","venn","ggrepel",
"ggdendro","ggplotify","gridExtra","cowplot","DESeq2","EBSeq","ggnewscale","edgeR","IHW",
"qvalue","org.Hs.eg.db","org.Mm.eg.db","org.Rn.eg.db","org.Xl.eg.db","org.Dm.eg.db",
"org.Ce.eg.db","AnnotationDbi","clusterProfiler","enrichplot","DOSE","msigdbr","genefilter",
"ComplexHeatmap","shinyBS","plotly","shinyjs","DEGreport","devtools","dorothea","umap", "biomaRt")
for(pkg in pkgs) if (!require(pkg, character.only = T)){
BiocManager::install(pkg, update = F)
}
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
install.packages("https://cran.r-project.org/src/contrib/Archive/lasso2/lasso2_1.2-22.tar.gz",repos = NULL, type = "source")
pkgs <- c("shiny","DT","gdata","rstatix","multcomp","ggpubr","venn","ggrepel",
"ggdendro","ggplotify","gridExtra","cowplot","DESeq2","EBSeq","ggnewscale","edgeR","IHW",
"qvalue","org.Hs.eg.db","org.Mm.eg.db","org.Rn.eg.db","org.Xl.eg.db","org.Dm.eg.db",
"org.Ce.eg.db","AnnotationDbi","clusterProfiler","enrichplot","DOSE","msigdbr","genefilter",
"ComplexHeatmap","shinyBS","plotly","shinyjs","DEGreport","devtools","dorothea","umap", "biomaRt")
for(pkg in pkgs) if (!require(pkg, character.only = T)){
BiocManager::install(pkg, update = F)
}
devtools::install_github("YuLab-SMU/clusterProfiler.dplyr")
install.packages("dectools")
install.packages("devtools")
devtools::install_github("YuLab-SMU/clusterProfiler.dplyr")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
pkgs <- c("shiny","DT","gdata","rstatix","multcomp","ggpubr","venn","ggrepel",
"ggdendro","ggplotify","gridExtra","cowplot","DESeq2","EBSeq","ggnewscale","edgeR","IHW",
"qvalue","org.Hs.eg.db","org.Mm.eg.db","org.Rn.eg.db","org.Xl.eg.db","org.Dm.eg.db",
"org.Ce.eg.db","AnnotationDbi","clusterProfiler","enrichplot","DOSE","msigdbr","genefilter",
"ComplexHeatmap","shinyBS","plotly","shinyjs","DEGreport","devtools","dorothea","umap", "biomaRt")
for(pkg in pkgs) if (!require(pkg, character.only = T)){
BiocManager::install(pkg, update = F)
}
BiocManager::install("clusterProfiler")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
pkgs <- c("shiny","DT","gdata","rstatix","multcomp","ggpubr","venn","ggrepel",
"ggdendro","ggplotify","gridExtra","cowplot","DESeq2","EBSeq","ggnewscale","edgeR","IHW",
"qvalue","org.Hs.eg.db","org.Mm.eg.db","org.Rn.eg.db","org.Xl.eg.db","org.Dm.eg.db",
"org.Ce.eg.db","AnnotationDbi","clusterProfiler","enrichplot","DOSE","msigdbr","genefilter",
"ComplexHeatmap","shinyBS","plotly","shinyjs","DEGreport","devtools","dorothea","umap", "biomaRt")
for(pkg in pkgs) if (!require(pkg, character.only = T)){
BiocManager::install(pkg, update = F)
}
devtools::install_github("YuLab-SMU/clusterProfiler.dplyr")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
pkgs <- c("shiny","DT","gdata","rstatix","multcomp","ggpubr","venn","ggrepel",
"ggdendro","ggplotify","gridExtra","cowplot","DESeq2","EBSeq","ggnewscale","edgeR","IHW",
"qvalue","org.Hs.eg.db","org.Mm.eg.db","org.Rn.eg.db","org.Xl.eg.db","org.Dm.eg.db",
"org.Ce.eg.db","AnnotationDbi","clusterProfiler","enrichplot","DOSE","msigdbr","genefilter",
"ComplexHeatmap","shinyBS","plotly","shinyjs","DEGreport","devtools","dorothea","umap", "biomaRt")
for(pkg in pkgs) if (!require(pkg, character.only = T)){
BiocManager::install(pkg, update = F)
}
devtools::install_github("YuLab-SMU/clusterProfiler.dplyr")
runApp('Desktop/Rproject/RNAseqChef')
shiny::runApp('Desktop/Rproject/RNAseqChef')
shiny::runApp('Desktop/Rproject/RNAseqChef')
shiny::runApp('Desktop/Rproject/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef')
shiny::runApp('Desktop/Rproject/RNAseqChef')
rsconnect::setAccountInfo(name='imeg-ku', token='15889DFD7BCE19A063EEC8924123C05E', secret='khIN0db+kY5CxEfp/iQeWKUYauhnJX7jqVeLJtAd')
devtools::install_github('robertamezquita/marge', ref = 'master')
library(marge)
check_homer()
library(marge)
check_homer()
library(marge)
check_homer()
check_homer()
library(marge)
check_homer()
getwd()
shiny::runApp('Desktop/Rproject/RNAseqChef_docker/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef')
shiny::runApp('Desktop/Rproject/RNAseqChef')
]
runApp('Desktop/Rproject/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef')
shiny::runApp('Desktop/Rproject/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef')
q;
q()
shiny::runApp('Desktop/Rproject/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef')
library(TFBSTools)
runApp('Desktop/Rproject/RNAseqChef')
q()
pwms <- getMatrixSet(JASPAR2020,
opts = list(matrixtype = "PWM",
tax_group = "vertebrates",
species = tax,
version = "Latest version"
))
shiny::runApp('Desktop/Rproject/RNAseqChef_docker/RNAseqChef')
shiny::runApp('Desktop/Rproject/RNAseqChef_docker/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef')
Motifplot <- function(df2, showCategory=5,padj){
df <- data.frame(matrix(rep(NA, 11), nrow=1))[numeric(0), ]
for(name in names(df2)){
res <- df2[[name]]
res <- dplyr::filter(res, X1.1 > -log10(padj))
res <- res %>% dplyr::arrange(-X1.1)
if(length(rownames(res)) > showCategory){
res <- res[1:showCategory,]
}
df <- rbind(df, res)
}
colnames(df) <- c("motif.id", "motif.name","motif.percentGC", "negLog10P", "negLog10Padj", "log2enr",
"pearsonResid", "expForegroundWgtWithHits", "sumForegroundWgtWithHits", "sumBackgroundWgtWithHits",
"Group")
df$padj <- 10^(-df$negLog10Padj)
df <- dplyr::mutate(df, x = paste0(Group, 1/-log10(eval(parse(text = "padj")))))
df$x <- gsub(":","", df$x)
df <- dplyr::arrange(df, x)
idx <- order(df[["x"]], decreasing = FALSE)
df$motif.name <- factor(df$motif.name,
levels=rev(unique(df$motif.name[idx])))
d <- ggplot(df, aes(x = Group,y= motif.name,color=padj,size=log2enr))+
geom_point() +
scale_color_continuous(low="red", high="blue",
guide=guide_colorbar(reverse=TRUE)) +
scale_size(range=c(1, 6))+ theme_dose(font.size=15)+ylab(NULL)+xlab(NULL) +
scale_y_discrete(labels = label_wrap_gen(30)) + scale_x_discrete(position = "top")+
theme(plot.margin=margin(l=-0.75,unit="cm"))
df <- df %>% distinct(motif.id, .keep_all = T)
width.seqlogo = 2
highlight <- NULL
clres <- FALSE
optsL <- list(ID = df$motif.id)
pfm1 <- TFBSTools::getMatrixSet(JASPAR2020, opts = optsL)
maxwidth <- max(vapply(TFBSTools::Matrix(pfm1), ncol, 0L))
grobL <- lapply(pfm1, seqLogoGrob, xmax = maxwidth, xjust = "center")
hmSeqlogo <- HeatmapAnnotation(logo = annoSeqlogo(grobL = grobL,
which = "row", space = unit(1, "mm"),
width = unit(width.seqlogo, "inch")),
show_legend = FALSE, show_annotation_name = FALSE,
which = "row")
tmp <- matrix(rep(NA, length(df$motif.id)),ncol = 1,
dimnames = list(df$motif.name, NULL))
hmMotifs <- Heatmap(matrix = tmp, name = "names", width = unit(0, "inch"),
na_col = NA, col = c(`TRUE` = "green3",`FALSE` = "white"),
cluster_rows = clres, show_row_dend = show_dendrogram,
cluster_columns = FALSE, show_row_names = TRUE, row_names_side = "left",
show_column_names = FALSE, show_heatmap_legend = FALSE,
left_annotation = hmSeqlogo)
h <- grid.grabExpr(print(hmMotifs),wrap.grobs=TRUE)
p <- plot_grid(plot_grid(NULL, h, ncol = 1, rel_heights = c(0.05:10)),as.grob(d))
return(p)
}
MotifAnalysis <- function(data, Species, upstream, downstream){
withProgress(message = "Motif analysis takes about 2 min per group",{
if(Species == "Mus musculus"){
library(TxDb.Mmusculus.UCSC.mm10.knownGene)
library(BSgenome.Mmusculus.UCSC.mm10)
txdb <- TxDb.Mmusculus.UCSC.mm10.knownGene
genome = BSgenome.Mmusculus.UCSC.mm10
tax <- 10090
}
if(Species == "Homo sapiens"){
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(BSgenome.Hsapiens.UCSC.hg19)
txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene
genome = BSgenome.Hsapiens.UCSC.hg19
tax <- 9606
}
x <- promoters(genes(txdb), upstream = upstream, downstream = downstream)
pwms <- getMatrixSet(JASPAR2020,
opts = list(matrixtype = "PWM",
tax_group = "vertebrates",
species = tax
))
df <- data.frame(GeneID = data[,1], Group = data[,2])
df2 <- list()
group_file <- length(unique(df$Group))
perc <- 0
for(name in unique(df$Group)){
perc <- perc + 1
data <- dplyr::filter(df, Group == name)
my.symbols <- data$GeneID
group.name <- paste(name, "\n(", length(my.symbols),")",sep = "")
if(str_detect(my.symbols[1], "ENS")){
gene_IDs<-AnnotationDbi::select(org(Species),keys = my.symbols,
keytype = "ENSEMBL",
columns = c("ENTREZID","ENSEMBL"))
colnames(gene_IDs) <- c("gene_id","ENSEMBL")
}else{
gene_IDs <- AnnotationDbi::select(org(Species), keys = my.symbols,
keytype = "SYMBOL",
columns = c("SYMBOL","ENTREZID"))
colnames(gene_IDs) <- c("SYMBOL","gene_id")
}
y <- subset(x, gene_id %in% gene_IDs$gene_id)
seq <- getSeq(genome, y)
se <- calcBinnedMotifEnrR(seqs = seq,
pwmL = pwms,
background = "genome",
genome = genome,
genome.regions = subset(x, ! gene_id %in% gene_IDs$gene_id),
genome.oversample = 2,
BPPARAM = BiocParallel::SerialParam(RNGseed = 42),
verbose = TRUE)
res <- data.frame(motif.id = elementMetadata(se)$motif.id, motif.name = elementMetadata(se)$motif.name,
motif.percentGC = elementMetadata(se)$motif.percentGC,
negLog10P = assay(se,"negLog10P"),negLog10Padj = assay(se,"negLog10Padj"),
log2enr = assay(se,"log2enr"),pearsonResid = assay(se,"pearsonResid"),
expForegroundWgtWithHits = assay(se,"expForegroundWgtWithHits"),
sumForegroundWgtWithHits = assay(se,"sumForegroundWgtWithHits"),
sumBackgroundWgtWithHits = assay(se,"sumBackgroundWgtWithHits"),
Group = group.name)
df2[[name]] <- res
incProgress(1/group_file, message = paste("Finish motif analysis of Group '", name, "', ", perc, "/", group_file,sep = ""))
}
return(df2)
})
}
runApp('Desktop/Rproject/RNAseqChef_docker/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef_docker/RNAseqChef')
shiny::runApp('Desktop/Rproject/RNAseqChef')
shiny::runApp('Desktop/Rproject/RNAseqChef_docker/RNAseqChef')
shiny::runApp('Desktop/Rproject/RNAseqChef_docker/RNAseqChef')
runApp('Desktop/Rproject/Automate_shiny/Automate_webApp.R')
runApp('Desktop/Rproject/Automate_shiny/Automate_webApp.R')
runApp('Desktop/Rproject/Automate_shiny/Automate_webApp.R')
runApp('Desktop/Rproject/Automate_shiny/Automate_webApp.R')
runApp('Desktop/Rproject/Automate_shiny/Automate_webApp.R')
runApp('Desktop/Rproject/RNAseqChef_docker/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef_docker/RNAseqChef')
shiny::runApp('Desktop/Rproject/RNAseqChef_docker/RNAseqChef')
runApp('Desktop/Rproject/Automate_shiny/Automate_webApp.R')
runApp('Desktop/Rproject/Automate_shiny/Automate_webApp.R')
runApp('Desktop/Rproject/Automate_shiny/Automate_webApp.R')
runApp('Desktop/Rproject/Automate_shiny/Automate_webApp.R')
shiny::runApp('Desktop/Rproject/RNAseqChef_docker/RNAseqChef')
shiny::runApp('Desktop/Rproject/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef_docker/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef')
runApp('Desktop/Rproject/RNAseqChef')
